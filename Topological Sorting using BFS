//method 1: using bfs
	vector<int> topoSort(int v, vector<int> adj[]) 
	{
	    // code here
	    
	    //step 1: store indegree of each vertex
	    vector<int> indegree(v,0);
	    for(int i=0;i<v;i++) {
	        for(auto &x:adj[i]) {
	            indegree[x]++;
	        }
	    }
	    
	    //step 2: create a queue and insert those vertex whose indegree is 0
	    queue<int> q;
	    for(int i=0;i<v;i++) {
	        if(indegree[i]==0) q.push(i);
	    }
	    
	    vector<int> ans;
	    //step 3: for every adjacent v of u 
	       // 1: reduce indegree of v by 1
	       // 2: if indegree of v become 0 add v to the queue
	    while(q.empty()==false) {
	        ans.push_back(q.front());
	        for(auto &x:adj[q.front()]) {
	            indegree[x]--;
	            if(indegree[x]==0) q.push(x);
	        }
	        q.pop();
	    }
	    return ans;
	}


//method 2: using dfs

	void dfs(int i,vector<int>adj[],vector<int>&visited,stack<int>&st) {
	    visited[i]=1;
	    for(auto node:adj[i]) {
	        if(visited[node]==0) {
	            dfs(node,adj,visited,st);
	        }
	    }
	    st.push(i);
	}
	
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    
	    //topological sort using dfs
	    stack<int> st;
	    vector<int> visited(V,0);
	    for(int i=0;i<V;i++) {
	        if(visited[i]==0) {
	            dfs(i,adj,visited,st);
	        }
	    }
	    vector<int> ans;
	    while(!st.empty()) {
	        ans.push_back(st.top());
	        st.pop();
	    }
	    return ans;
	}
