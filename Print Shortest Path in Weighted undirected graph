    vector<int> shortestPath(int n, int m, vector<vector<int>>& edges) {
        // Code here
        vector<pair<int,int>> adj[n+1];
        for(auto &x:edges) {
            int u=x[0];
            int v=x[1];
            int w=x[2];
            //for undirected graph you need to take both the edges 
            adj[u].push_back({v,w});
            adj[v].push_back({u,w});
        }
        
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        vector<int> dist(n+1,INT_MAX);
        vector<int> par(n+1,-1);
        
        dist[1]=0;
        pq.push({0,1});
        par[1]=1;
        while(pq.empty()==false) {
            int weight=pq.top().first;
            int node= pq.top().second;
            pq.pop();
            
            for(auto x:adj[node]) {
                int v=x.first;
                int w=x.second;
                
                if(dist[v]> weight+w) {
                    dist[v]=weight+w;
                    pq.push({dist[v],v});
                    par[v]=node;
                }
            }
        }
        
        vector<int> ans;
        if(par[n]==-1) return {-1};
        
        while(par[n]!=n) {
            ans.push_back(n);
            n=par[n];
        }
        
        ans.push_back(1);
        reverse(ans.begin(),ans.end());
        return ans;
        
    }
