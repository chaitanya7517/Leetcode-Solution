void topological_sort(vector<pair<int,int>>graph[],int i,vector<int>&visited,stack<int>&st) {
        visited[i]=1;
        
        for(auto x:graph[i]) {
            int v=x.first;
            int w=x.second;
            if(visited[v]==0) {
                topological_sort(graph,v,visited,st);
            }
        }
        st.push(i);
    }
  
     vector<int> shortestPath(int n,int m, vector<vector<int>>& edges){
        // code here
        
        vector<pair<int,int>> graph[n];
        for(auto x:edges) {
            int u= x[0];
            int v= x[1];
            int w= x[2];
            graph[u].push_back({v,w});
        }
        
        vector<int> visited(n,0);
        stack<int> st;
        
        for(int i=0;i<n;i++) {
            if(visited[i]==0) {
                topological_sort(graph,i,visited,st);
            }
        }
        
        vector<int> dist(n);
        for(int i=0;i<n;i++) {
            dist[i]= 1e5;
        }
        dist[0]=0;
        while(!st.empty()) {
            int u=st.top();
            st.pop();
            for(auto x: graph[u]) {
                int v=x.first;
                int w=x.second;
                if(dist[u]+w < dist[v]) dist[v]=dist[u]+w;
            }
        }
        
        for(auto &x:dist) 
            if(x==1e5) 
                x=-1;
        
        return dist;
    }
